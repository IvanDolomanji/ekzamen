Основные алгоритмические конструкции в языке программирования
Алгоритмические конструкции — это базовые способы организации выполнения команд в программе. В языке C# выделяют три основные конструкции:

Последовательность — операторы выполняются один за другим в порядке их расположения в коде.

Разветвление — выполнение операторов в зависимости от условия. Используется для выбора одного из нескольких путей выполнения программы.

Циклы — позволяют многократно выполнять одну и ту же последовательность команд.

2. Структура программы на языке C#
Каждая программа на C# состоит из:

Директивы using — подключение необходимых пространств имён.

Объявления пространства имён — логическая группировка классов.

Объявления класса — основной контейнер для методов и переменных.

Метода Main() — точка входа программы, с него начинается выполнение.

3. Понятие переменной и константы
Переменная — именованная область памяти, предназначенная для хранения данных, которые могут изменяться в процессе работы программы.
Константа — это именованная область памяти, значение которой задаётся один раз и не может изменяться.

4. Понятие типа данных
Тип данных определяет:

какое значение может храниться в переменной;

какие операции с этим значением допустимы;

сколько памяти займёт значение.

В C# существуют числовые, символьные, строковые, булевы и другие типы.

5. Консольный ввод данных
Консольный ввод позволяет считывать данные, которые пользователь вводит с клавиатуры во время выполнения программы.

6. Консольный вывод данных
Консольный вывод — это отображение информации пользователю в окне консоли. Может быть с переносом строки или без.

7. Оператор присваивания
Позволяет записывать значение в переменную. Левее стоит имя переменной, а правее — выражение, значение которого будет присвоено.

8. Полный условный оператор
Позволяет проверить некоторое условие, и в зависимости от результата выполнить одну из двух последовательностей команд. Обязательно содержит блок для ложного условия.

9. Неполный условный оператор
Содержит только проверку условия и блок команд, выполняемый если условие истинно. Блока для ложного условия нет.

10. Оператор выбора
Используется для выбора одной из нескольких возможных ветвей в зависимости от значения переменной. В C# реализуется с помощью конструкции switch.

11. Цикл с предварительной проверкой условия
Перед каждой итерацией проверяется условие. Если оно истинно — выполняется тело цикла. Если ложно — цикл завершает работу.

12. Цикл с последующей проверкой условия
Сначала выполняется тело цикла, затем проверяется условие. Такой цикл выполняется минимум один раз.

13. Цикл с параметром
Цикл, который выполняется заранее известное количество раз. Параметр цикла обычно увеличивается или уменьшается на определённое значение после каждой итерации.

14. Понятие массива и массива объектов
Массив — это структура данных, которая хранит несколько значений одного типа, доступ к которым осуществляется по индексу.
Массив объектов — массив, в котором хранятся экземпляры какого-либо класса.

15. Понятие объектно-ориентированного программирования
Объектно-ориентированное программирование (ООП) — это парадигма, в которой основными элементами являются объекты, представляющие собой объединение данных и методов для работы с ними.

16. Основные принципы ООП
Инкапсуляция — сокрытие внутренней реализации объекта от внешнего мира.

Наследование — создание нового класса на основе уже существующего.

Полиморфизм — способность методов с одинаковым именем вести себя по-разному в зависимости от контекста.

17. Определение класса
Класс — это шаблон (описание) объекта, определяющий его свойства (поля) и поведение (методы).

18. Определение объекта класса
Объект — это экземпляр класса, созданный в памяти во время выполнения программы, обладающий собственными значениями полей.

19. Что значит описать объект?
Описать объект — значит определить класс, по которому объект будет создаваться: указать его свойства и методы.

20. Что значит создать объект?
Создать объект — значит выделить в памяти место для экземпляра класса и инициализировать его.

21. Этапы создания объекта
Описание класса.

Объявление переменной объекта.

Выделение памяти и вызов конструктора.

Использование объекта.

22. Понятие экземпляра класса
Экземпляр класса — это конкретный объект, созданный на основе описания класса.

23. Структура описания класса
Содержит:

имя класса;

модификаторы доступа;

список полей;

список методов;

конструкторы.

24. Понятие поля
Поле — это переменная, объявленная внутри класса, которая хранит данные объекта.

25. Модификаторы доступа элементов класса
Определяют доступность полей и методов:

public — доступен всем.

private — только внутри класса.

protected — внутри класса и производных.

internal — внутри текущей сборки.

26. Область видимости переменных и констант
Определяет, в каких частях программы доступна переменная или константа. Может быть:

внутри метода;

внутри класса;

во всей программе.

27. Понятие метода
Метод — это функция или процедура, принадлежащая классу, которая описывает действие объекта.

28. Описание метода
Включает:

модификатор доступа;

возвращаемый тип;

имя метода;

список параметров;

тело метода.

29. Доступ к методу
Осуществляется через объект класса (или напрямую для статических методов) с указанием имени метода.

30. Определение конструктора
Конструктор — это специальный метод, вызываемый автоматически при создании объекта для его инициализации.

31. Особенности конструктора
Имя совпадает с именем класса.

Не имеет возвращаемого значения.

Может быть перегружен (несколько конструкторов с разными параметрами).

32. Назначение конструктора
Инициализация полей объекта начальными значениями при его создании.

33. Общая форма записи конструктора
Совпадает с именем класса, не имеет типа возвращаемого значения, вызывается при создании объекта.

34. Виды конструкторов и их отличие
По умолчанию — без параметров.

Параметрический — принимает параметры.

Статический — инициализирует статические поля.

35. Определение интерфейса
Интерфейс — это описание набора методов и свойств, которые должны быть реализованы в классе, но без их реализации.

36. Объявление интерфейса
Выполняется с помощью ключевого слова interface, только методы и свойства без реализации.

37. Общая форма реализации интерфейса в классе
Класс подписывается на интерфейс и обязан реализовать все его элементы.

38. Особенности интерфейсов
Не содержат реализации.

Можно реализовать несколько интерфейсов в одном классе.

Позволяют создавать универсальные решения.

39. Отличия между интерфейсами и абстрактными классами
Интерфейсы не содержат реализации, абстрактные классы могут.

Класс может наследовать только один абстрактный класс, но реализовать несколько интерфейсов.

40. Какие элементы C# можно объявлять статическими
Методы, поля, свойства, классы, конструкторы можно объявить статическими, чтобы использовать без создания объекта.

41. Понятие статического класса
Класс, содержащий только статические члены. Его нельзя создать в виде объекта.

42. Понятие свойства в C#
Свойство — это специальный механизм доступа к данным класса, сочетающий в себе метод получения значения (get) и метод его установки (set).

43. Общая форма объявления свойства в классе
Определяется внутри класса с использованием ключевых слов get и set.

44. Объявление массива объектов
Создание массива, элементы которого — экземпляры классов.

45. Алгоритм создания массива объектов
Объявление массива.

Выделение памяти.

Инициализация объектов.

46. Назначение метода Main()
Это точка входа программы, с которой начинается выполнение всех команд.

47. Определение структуры
Структура — это пользовательский тип данных, объединяющий связанные данные разных типов.

48. Синтаксис структуры
Похож на класс, но вместо class используется struct.

49. Этапы использования структуры
Объявление структуры.

Создание переменной структуры.

Использование полей.

50. Отличия между структурами и классами
Структуры — значимые типы, классы — ссылочные.

Структуры нельзя наследовать.

У структур нет конструктора по умолчанию.
51. Определение перечисления
Перечисление (enum) — это набор именованных констант целочисленного типа. Используется для описания ограниченного набора допустимых значений. Повышает читаемость кода и уменьшает вероятность ошибок.

52. Общая форма объявления перечисления
Перечисление объявляется с помощью ключевого слова enum, после которого идёт его имя и список именованных констант в фигурных скобках. По умолчанию каждой константе присваивается целое значение, начиная с 0, но можно задать и свои значения.

53. Понятие наследования в ООП
Наследование — это механизм, позволяющий создать новый класс на основе существующего, унаследовав его поля и методы. Новый класс называется производным, а исходный — базовым. Производный класс может расширять или переопределять функциональность базового.

54. Особенности базового и производного классов
Базовый класс — класс, от которого наследуются другие.

Производный класс — класс, который наследует свойства и методы базового и может добавлять свои или изменять унаследованные.

Производный класс имеет доступ ко всем открытым и защищённым членам базового.

55. Синтаксис объявления производного класса (потомка)
Производный класс создаётся с указанием имени базового после двоеточия. Таким образом, он наследует все члены базового класса, доступные по модификаторам.

56. Описание конструктора производного класса
Конструктор производного класса может:

вызывать конструктор базового класса с помощью ключевого слова base;

содержать собственные инструкции и инициализацию дополнительных полей.

Если базовый класс имеет только параметрический конструктор, производный обязан его явно вызывать.

57. Понятие виртуального метода
Виртуальный метод — это метод, который можно переопределить в производном классе. Позволяет реализовать разное поведение метода с одинаковым именем в разных классах.

58. Общая форма объявления виртуального метода
Объявляется с ключевым словом virtual в базовом классе. Для его переопределения в производном классе используется ключевое слово override.

59. Понятие переопределения метода
Переопределение — это предоставление новой реализации метода в производном классе вместо унаследованной от базового. Используется для изменения поведения виртуального или абстрактного метода.

60. Виды наследования
Одиночное наследование — производный класс наследует один базовый.

Множественное через интерфейсы — класс реализует несколько интерфейсов.

Многоуровневое наследование — производный класс сам становится базовым для другого.

61. Понятие абстрактного класса
Абстрактный класс — это класс, от которого нельзя создать объект. Он служит шаблоном для других классов. Может содержать как реализованные, так и абстрактные методы.

62. Особенности абстрактного класса
Не допускает создания экземпляров.

Может содержать абстрактные методы (без реализации).

Используется для задания общего интерфейса наследникам.

63. Общая форма объявления абстрактного класса
Объявляется с ключевым словом abstract. Может содержать как реализованные, так и абстрактные методы.

64. Понятие абстрактного метода
Абстрактный метод — метод без реализации в абстрактном классе. Производный класс обязан переопределить его, предоставив собственную реализацию.

65. Отличия между абстрактным и виртуальным методами
Виртуальный метод имеет реализацию по умолчанию, которую можно переопределить.

Абстрактный метод не имеет реализации, переопределение обязательно.

Абстрактный метод возможен только в абстрактном классе.

66. Понятие обобщения
Обобщения (Generics) — это возможность создавать классы, методы и интерфейсы, работающие с различными типами данных без потери типобезопасности. Позволяют создавать универсальный код для работы с разными типами.

67. Понятие делегата
Делегат — это тип, представляющий ссылку на метод с определённой сигнатурой и возвращаемым значением. Делегаты позволяют передавать методы как параметры другим методам и вызывать их динамически.

68. Описание делегата
Объявляется с помощью ключевого слова delegate, указывается возвращаемый тип и список параметров. Делегаты используются для создания событий, обратных вызовов и реализации гибких алгоритмов.

69. Алгоритм создания делегата
Объявление делегата с нужной сигнатурой.

Создание переменной делегата, которой можно присвоить метод с совпадающей сигнатурой.

Присваивание метода делегату.

Вызов метода через делегат.

Возможность добавить несколько методов в цепочку вызова одного делегата.